<project name="Ser321 Assign4 C++ Message GUI, sample build file."
         default="targets" basedir="."
         xmlns="antlib:org.apache.tools.ant">
   <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
   <!-- Could not for the life of me get this to work, had to specify a class path..-->
   <taskdef resource="cpptasks.tasks" />

   

   <property name="src" value="./src" />
   <property name="lib" value="./lib" />
   <property name="src.cpp.dir" value="src"/>
   <property name="obj.dir" value="obj"/>
   <property name="dist.dir" value="bin"/>
   <property environment="env"/>
   <property name="host" value="localhost" />
   <property name="port" value="1099" />
   <property name="userId" value="Joshua.Kronemeyer" />

   <target name="targets">
     <echo message="targets are clean, prepare, build.sample, execute.sample, targets"/>
     <echo message="execute manually with: ./bin/guiSample"/>
   </target>

   <target name="clean">
     <delete dir="${obj.dir}" failonerror="false"/>
     <delete dir="${dist.dir}" failonerror="false"/>
   </target>

   <target name="prepare">
      <!-- Create the time stamp -->
      <tstamp/>
      <!-- Create the build directory structure used by compile -->
      <echo message="home defined as: ${env.HOME}" />
      <mkdir dir="${dist.dir}" />
      <mkdir dir="${obj.dir}" />
      <if>
         <isset property="env.USERNAME"/>
         <then>
            <echo message="detected username is: ${env.USERNAME}"/>
         </then>
      <elseif>
         <isset property="env.USER"/>
         <then>
            <echo message="detected user is: ${env.USER}"/>
         </then>
      </elseif>
      </if>
      <echo message="host name is: ${os.name}"/>
      <echo message="host arch is: ${os.arch}"/>
      <echo message="host version is: ${os.version}"/>
      <echo message="base directory is: ${basedir}"/>
   </target>

   <target name="generate.client.stub" depends="prepare">
     <exec dir="${basedir}" executable="jsonrpcstub">
       <arg line="spec.json --cpp-client=StubClient"/>
     </exec>
     <copy file="stubclient.h" tofile="${src}/client/stubclient.h"/>
     <delete file="stubclient.h"/>
   </target>

   <target name="generate.server.stub" depends="prepare">
     <exec dir="${basedir}" executable="jsonrpcstub">
       <arg line="spec.json --cpp-server=AbstractStubServer"/>
     </exec>
     <copy file="abstractstubserver.h" tofile="${src}/server/abstractstubserver.h"/>
     <delete file="abstractstubserver.h"/>
   </target>

   <target name="build.client" depends="prepare">
      <cc outtype="executable" subsystem="console"
          outfile="${dist.dir}/guiSample"
          objdir="${obj.dir}">
	  <compiler id="Linuxgcc" name="g++">
	  <compilerarg value="-std=c++14"/>
	  </compiler>
          <includepath>
             <dirset dir="/" includes="usr/include,usr/local/include"/>
          </includepath>
          <libset libs="stdc++,fltk,jsoncpp,jsonrpccpp-common, jsoncpp, microhttpd,jsonrpccpp-client"/>
          <fileset dir="${src.cpp.dir}/client/" includes="Controller.cpp, MessageGui.cpp, Message.cpp"/>
      </cc>
   </target>

   <target name="client" depends="build.client">
	<exec executable="./bin/guiSample">
	 <arg value="${host}"/> 
         <arg value="${port}"/>
	 <arg value="${userId}"/>
	</exec>

   </target>
      <target name="build.server" depends="prepare">
      <cc outtype="executable" subsystem="console"
          outfile="${dist.dir}/server"
          objdir="${obj.dir}">
	  <compiler id="Linuxgcc" name="g++">
	  <compilerarg value="-std=c++14"/>
	  </compiler>
          <includepath>
             <dirset dir="/" includes="usr/include,usr/local/include"/>
          </includepath>
          <libset libs="stdc++,jsonrpccpp-server, jsonrpccpp-common, jsoncpp, microhttpd"/>
          <fileset dir="${src.cpp.dir}/server/" includes="MessageServer.cpp"/>
      </cc>
   </target>

   <target name="server" depends="build.server">
      <exec executable="./bin/server">
      <arg value="${port}"/>
      </exec>
   </target>
</project>
